%%-*- mode: erlang -*-

{mapping,
 "bridge.kafka.broker",
 "emqx_kafka_bridge.broker",
 [{default, "localhost:9092"}, {datatype, string}]}.

{translation,
 "emqx_kafka_bridge.broker",
 fun(Conf) ->
    Broker = cuttlefish:conf_get("bridge.kafka.broker", Conf),
    BrokerList = string:split(Broker, ",", all),
    lists:map(fun(X) ->
                 [Host, Port] = string:tokens(X, ":"),
                 {string:trim(Host), list_to_integer(string:trim(Port))}
              end,
              BrokerList)
 end}.

{mapping,
 "bridge.kafka.partition",
 "emqx_kafka_bridge.partition",
 [{datatype, integer}, {default, 1}]}.

{mapping,
 "bridge.kafka.client.string_configs",
 "emqx_kafka_bridge.client",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.client.atom_configs",
 "emqx_kafka_bridge.client",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.client.integer_configs",
 "emqx_kafka_bridge.client",
 [{datatype, string}]}.

{translation,
 "emqx_kafka_bridge.client",
 fun(Conf) ->
    Config = cuttlefish_variable:filter_by_prefix("bridge.kafka.client", Conf),
    ClientConfig =
        lists:map(fun(X) ->
                     {Match, Options} = X,
                     Type = lists:last(Match),
                     Items = string:split(Options, ",", all),
                     case Type of
                         "atom_configs" ->
                             lists:map(fun(Item) ->
                                          [Option, Value] = string:tokens(Item, ":"),
                                          {list_to_atom(string:trim(Option)),
                                           list_to_atom(string:trim(Value))}
                                       end,
                                       Items);
                         "integer_configs" ->
                             lists:map(fun(Item) ->
                                          [Option, Value] = string:tokens(Item, ":"),
                                          {list_to_atom(string:trim(Option)),
                                           list_to_integer(string:trim(Value))}
                                       end,
                                       Items);
                         "string_configs" ->
                             lists:map(fun(Item) ->
                                          [Option, Value] = string:tokens(Item, ":"),
                                          {list_to_atom(string:trim(Option)), string:trim(Value)}
                                       end,
                                       Items)
                     end
                  end,
                  Config),
    lists:append(ClientConfig)
 end}.

{mapping,
 "bridge.kafka.payload_encoding",
 "emqx_kafka_bridge.payload_encoding",
 [{default, plain}, {datatype, {enum, [base62, base64, plain]}}]}.

%% =================== Pool Configs ========================
{mapping,
 "bridge.kafka.auto_reconnect",
 "emqx_kafka_bridge.auto_reconnect",
 [{default, 1}, {datatype, integer}]}.

{mapping,
 "bridge.kafka.pool_size",
 "emqx_kafka_bridge.pool_size",
 [{default, 10}, {datatype, integer}]}.

%% ====================== Rule configs ========================
{mapping,
 "bridge.kafka.rule.client.connect.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.client.connack.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.client.connected.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.client.disconnected.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.client.subscribe.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.client.unsubscribe.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.session.subscribed.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.session.unsubscribed.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.session.terminated.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.message.publish.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.message.acked.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.message.delivered.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{translation,
 "emqx_kafka_bridge.rules",
 fun(Conf) ->
    Hooks = cuttlefish_variable:filter_by_prefix("bridge.kafka.rule", Conf),
    lists:map(fun({[_, _, _, Name1, Name2, _], Val}) ->
                 {lists:concat([Name1, ".", Name2]), Val}
              end,
              Hooks)
 end}.
