%%-*- mode: erlang -*-

{mapping,
 "bridge.kafka.host",
 "emqx_kafka_bridge.host",
 [{default, "127.0.0.1"}, {datatype, string}]}.

{mapping,
 "bridge.kafka.port",
 "emqx_kafka_bridge.port",
 [{default, 9092}, {datatype, integer}]}.

{mapping,
 "bridge.kafka.payload_encoding",
 "emqx_kafka_bridge.payload_encoding",
 [{default, plain}, {datatype, {enum, [base62, base64, plain]}}]}.

%% =================== Pool Configs ========================
{mapping,
 "bridge.kafka.auto_reconnect",
 "emqx_kafka_bridge.auto_reconnect",
 [{default, 1}, {datatype, integer}]}.

{mapping,
 "bridge.kafka.pool_size",
 "emqx_kafka_bridge.pool_size",
 [{default, 10}, {datatype, integer}]}.

%% ====================== Rule configs ========================
{mapping,
 "bridge.kafka.rule.client.connect.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.client.connack.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.client.connected.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.client.disconnected.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.client.subscribe.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.client.unsubscribe.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.session.subscribed.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.session.unsubscribed.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.session.terminated.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.message.publish.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.message.acked.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{mapping,
 "bridge.kafka.rule.message.delivered.$name",
 "emqx_kafka_bridge.rules",
 [{datatype, string}]}.

{translation,
 "emqx_kafka_bridge.rules",
 fun(Conf) ->
    Hooks = cuttlefish_variable:filter_by_prefix("bridge.kafka.rule", Conf),
    lists:map(fun({[_, _, _, Name1, Name2, _], Val}) ->
                 {lists:concat([Name1, ".", Name2]), Val}
              end,
              Hooks)
 end}.
